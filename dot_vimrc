" vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'vim-ruby/vim-ruby'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'sheerun/vim-polyglot'
Plug 'vim-test/vim-test'
Plug 'pangloss/vim-javascript'
Plug 'dense-analysis/ale'
Plug 'cormacrelf/vim-colors-github'
Plug 'preservim/nerdtree'

call plug#end()

" Color Scheme
set termguicolors
colorscheme github

" Open splits below and right
set splitbelow
set splitright

" Don't blink cursor
set guicursor+=n-v-c:blinkon0

" hide scrollbars in MacVim
set guioptions=r

" Enable syntax highlighting
syntax on

" Color invisible characters
highlight NonText ctermfg=DarkGrey
highlight SpecialKey ctermfg=DarkGrey

" Show line numbers
set number
set relativenumber

" Highlight current line
set cursorline

" Search
set ignorecase

" Safety
set undofile
set noswapfile
set nobackup
set nowritebackup
set undodir=/tmp/.vim_undo

" Indentation
set wrap
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Show command
set showcmd

" STFU
set visualbell

" Color line numbers
highlight LineNr ctermfg=DarkGrey

" Highlight trailing whitespaces
" http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim
match Todo /\s\+$/

" yank to clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

" write file contents automatically when calling :make
set autowrite

""""""""""""""""""""""""""""""""""""""""
" Shortcuts, commands
""""""""""""""""""""""""""""""""""""""""

" Leader is space
let mapleader="\<Space>"

" Quickly pressing jj exits insert mode
imap jj <Esc>

" Navigate wrapped lines quickly
nmap j gj
nmap k gk

" Navigate between windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Remove trailing whitespaces
nnoremap <Leader>w :%s/\s\+$//e<CR>

" Live it.
noremap <Up> :resize +2<CR>
noremap <Down> :resize -2<CR>
noremap <Left> :vertical resize -2<CR>
noremap <Right> :vertical resize +2<CR>

" Quick vimrc edit and source
nnoremap <Leader>vi :tabnew $MYVIMRC<CR>
nnoremap <Leader>so :source $MYVIMRC<CR>

" Quickly quit help files
autocmd Filetype help nnoremap <buffer> q :q<CR>
autocmd Filetype godoc nnoremap <buffer> q :q<CR>

" Edit files in same directory as the current file
nnoremap <Leader>ew :e <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <Leader>es :sp <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <Leader>ev :vsp <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <Leader>et :tabe <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>

" Repeat last macro instead of going to ex mode
nnoremap Q @@

" Switch between the last two files
nnoremap <Leader><Leader> <C-^>

" Insert timestamp
nmap <F3> i<C-R>=strftime("%Y-%m-%d")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d")<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Set tags for vim-fugitive
set tags^=.git/tags

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

" Plugins

" fzf
nnoremap <C-P> :Files<CR>
nnoremap <C-B> :Buffers<CR>

" vim-test
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>

" Dispatch map
nnoremap <F9> :Dispatch<CR>

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = "github"
let g:lightline = { 'colorscheme': 'github' }

" NERDTree
nnoremap <C-t> :NERDTreeToggleVCS<CR>
nnoremap <C-f> :NERDTreeFind<CR>
-
" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" ALE
augroup ale
  autocmd!

  autocmd VimEnter *
        \ set updatetime=1000 |
        \ let g:ale_lint_on_text_changed = 0
  autocmd CursorHold * call ale#Queue(0)
  autocmd CursorHoldI * call ale#Queue(0)
  autocmd InsertEnter * call ale#Queue(0)
  autocmd InsertLeave * call ale#Queue(0)
augroup END

" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" Standard Ruby
let g:ale_linters = {'ruby': ['standardrb']}
let g:ale_fixers = {'ruby': ['standardrb']}
let g:ale_fix_on_save = 1

# vim-ruby indentation
let g:ruby_indent_assignment_style = 'variable'
let g:ruby_indent_hanging_elements = 0

